# this file is not designed to be run directly
# instead, use the docker-compose.<os>.<swift> files
# eg docker-compose -f docker/docker-compose.yaml -f docker/docker-compose.1604.41.yaml run test
version: "3"

services:

  runtime-setup:
    image: swift-nio:default
    build:
      context: .
      dockerfile: Dockerfile

  common: &common
    image: swift-nio:default
    depends_on: [runtime-setup]
    volumes:
      - ~/.ssh:/root/.ssh
      - ..:/code
    working_dir: /code

  sanity:
    <<: *common
    command: /bin/bash -cl "./scripts/sanity.sh"

  unit-tests:
    <<: *common
    command: /bin/bash -cl "swift test -Xswiftc -warnings-as-errors"

  integration-tests:
    <<: *common
    command: /bin/bash -cl "./scripts/integration_tests.sh"

  test:
    <<: *common
    command: /bin/bash -cl "swift test -Xswiftc -warnings-as-errors && ./scripts/integration_tests.sh"

  performance-test:
    <<: *common
    command: /bin/bash -cl "swift build -c release && ./.build/release/NIOPerformanceTester"

  # util

  shell:
    <<: *common
    entrypoint: /bin/bash

  # samples

  echo:
    <<: *common
    tty: true
    ports:
      - "9999:9999"
    command: /bin/bash -cl "swift run NIOEchoServer 0.0.0.0 9999"

  http:
    <<: *common
    tty: true
    ports:
      - "8888:8888"
    command: /bin/bash -cl "swift run NIOHTTP1Server 0.0.0.0 8888"

  cmake-integration-tests:
    <<: *common
    tty: true
    command: /bin/bash -cl "mkdir -p build-linux && cd build-linux && cmake -GNinja -DCMAKE_BUILD_TYPE=RelWithDebugInfo -DCMAKE_C_COMPILER=clang -DBUILD_SHARED_LIBS=ON .. && ninja -v && ctest -VV ."
